Revised simplex method
--------------------------------------------------

Select the type of input:
	1: Manual input
	2: Input from file
Selected: --------------------------------------------------

---- NOTE ----
Enter the relative path to the file, from under "/examples/" 
e.g. For file 1.txt, write "1.txt", that will load "/examples/1.txt"
--------------------------------------------------

---- NOTE ----
The file must be in the following format:
N M				Where N - number of equations and M - number of variables
"min" or "max"			Goal function minimisation or maximisation
c1 c2 c3 ... cM
A11 A12 ... A1M _ b1
A21 A22 ... A2M _ b2
................
AN1 AN2 ... ANM _ bN
  for x1, x2, x3, ... xM >= 0		Where '_' should be '<', '>' or '='

--------------------------------------------------

--------------------------------------------------

--------------------------------------------------

Enter the file name: Solving system(canonical form): Ax = b
c:
 [ 0.  0. -1. -3.]
A:
 [[ 1.  0.  1.  1.]
 [ 0.  1. -1.  2.]]
b:
 [6.0, 8.0]
--------------------------------------------------

Set unit matrix:
c:
 [ 0.  0. -1. -3.]
A:
 [[ 1.  0.  1.  1.]
 [ 0.  1. -1.  2.]]
b:
 [6.0, 8.0]
Base indexes (P):
 [0, 1]
Nonbase indexes (Q):
 [2, 3]
Base function value (Fo):
 0.0
--------------------------------------------------

Revised Simplex:

Starting x value:  [6. 8. 0. 0.]
Starting base matrix:
 [[1. 0.]
 [0. 1.]]
--------------------------------------------------

Iteration 0:

--------------------------------------------------

Calculating B:

B = Bo
Step 1: Solving system(1): uB = Cb
B:
 [[1. 0.]
 [0. 1.]]
Cb:
 [0. 0.]
Result of u(1): [0. 0.]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [-1. -3.]
K:
 [[ 1.  1.]
 [-1.  2.]]
Result(r):  [-1. -3.]
Bland's rule: first negative r(i) is r0
--------------------------------------------------

Step 3: Solving system(2): By = K0
B:
 [[1. 0.]
 [0. 1.]]
K: 2 
 [[ 1.]
 [-1.]]
Result of y(2): [ 1. -1.]
--------------------------------------------------

Step 4: check if y <= 0:

(y <= 0) is not true!

Finding optimal t:

Optimal t: 6.0

Column 0 leaves base (P)

--------------------------------------------------

ETA Matrix:
 [[ 1.  0.]
 [-1.  1.]]
--------------------------------------------------

Step 5: updating x:

Old x: [6. 8. 0. 0.]
New x: [ 0. 14.  6.  0.]
--------------------------------------------------

Iteration 1:

--------------------------------------------------

Calculating B:

B = Bo * E1
Step 1: Solving system(1): uB = Cb
B:
 [[ 1.  0.]
 [-1.  1.]]
Cb:
 [-1.  0.]
Result of u(1): [-1.  0.]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [ 0. -3.]
K:
 [[1. 1.]
 [0. 2.]]
Result(r):  [ 1. -2.]
Bland's rule: first negative r(i) is r1
--------------------------------------------------

Step 3: Solving system(2): By = K1
B:
 [[ 1.  0.]
 [-1.  1.]]
K: 3 
 [[1.]
 [2.]]
Result of y(2): [1. 3.]
--------------------------------------------------

Step 4: check if y <= 0:

(y <= 0) is not true!

Finding optimal t:

Optimal t: 4.666666666666667

Column 1 leaves base (P)

--------------------------------------------------

ETA Matrix:
 [[1. 1.]
 [0. 3.]]
--------------------------------------------------

Step 5: updating x:

Old x: [ 0. 14.  6.  0.]
New x: [0.    0.    1.333 4.667]
--------------------------------------------------

Iteration 2:

--------------------------------------------------

Calculating B:

B = Bo * E1 * E2
Step 1: Solving system(1): uB = Cb
B:
 [[ 1.  1.]
 [-1.  2.]]
Cb:
 [-1. -3.]
Result of u(1): [-1.667 -0.667]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [0. 0.]
K:
 [[1. 0.]
 [0. 1.]]
Result(r):  [1.667 0.667]
(r > 0) is true => optimal value is found!
--------------------------------------------------

Solution: [0.    0.    1.333 4.667]
Optimal value: -15.333

