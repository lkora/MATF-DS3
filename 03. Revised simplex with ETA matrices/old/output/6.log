Revised simplex method
--------------------------------------------------

Select the type of input:
	1: Manual input
	2: Input from file
Selected: --------------------------------------------------

---- NOTE ----
Enter the relative path to the file, from under "/examples/" 
e.g. For file 1.txt, write "1.txt", that will load "/examples/1.txt"
--------------------------------------------------

---- NOTE ----
The file must be in the following format:
N M				Where N - number of equations and M - number of variables
"min" or "max"			Goal function minimisation or maximisation
c1 c2 c3 ... cM
A11 A12 ... A1M _ b1
A21 A22 ... A2M _ b2
................
AN1 AN2 ... ANM _ bN
  for x1, x2, x3, ... xM >= 0		Where '_' should be '<', '>' or '='

--------------------------------------------------

--------------------------------------------------

--------------------------------------------------

Enter the file name: Solving system(canonical form): Ax = b
c:
 [ 0.  0.  0. -4. -1. -5. -3.]
A:
 [[ 1.  0.  0.  1. -1. -1.  3.]
 [ 0.  1.  0.  5.  1.  3.  8.]
 [ 0.  0.  1. -1.  2.  3. -5.]]
b:
 [1.0, 55.0, 3.0]
--------------------------------------------------

Set unit matrix:
c:
 [ 0.  0.  0. -4. -1. -5. -3.]
A:
 [[ 1.  0.  0.  1. -1. -1.  3.]
 [ 0.  1.  0.  5.  1.  3.  8.]
 [ 0.  0.  1. -1.  2.  3. -5.]]
b:
 [1.0, 55.0, 3.0]
Base indexes (P):
 [0, 1, 2]
Nonbase indexes (Q):
 [3, 4, 5, 6]
Base function value (Fo):
 0.0
--------------------------------------------------

Revised Simplex:

Starting x value:  [ 1. 55.  3.  0.  0.  0.  0.]
Starting base matrix:
 [[1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]]
--------------------------------------------------

Iteration 0:

--------------------------------------------------

Calculating B:

B = Bo
Step 1: Solving system(1): uB = Cb
B:
 [[1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]]
Cb:
 [0. 0. 0.]
Result of u(1): [0. 0. 0.]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [-4. -1. -5. -3.]
K:
 [[ 1. -1. -1.  3.]
 [ 5.  1.  3.  8.]
 [-1.  2.  3. -5.]]
Result(r):  [-4. -1. -5. -3.]
Bland's rule: first negative r(i) is r0
--------------------------------------------------

Step 3: Solving system(2): By = K0
B:
 [[1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]]
K: 3 
 [[ 1.]
 [ 5.]
 [-1.]]
Result of y(2): [ 1.  5. -1.]
--------------------------------------------------

Step 4: check if y <= 0:

(y <= 0) is not true!

Finding optimal t:

Optimal t: 1.0

Column 0 leaves base (P)

--------------------------------------------------

ETA Matrix:
 [[ 1.  0.  0.]
 [ 5.  1.  0.]
 [-1.  0.  1.]]
--------------------------------------------------

Step 5: updating x:

Old x: [ 1. 55.  3.  0.  0.  0.  0.]
New x: [ 0. 50.  4.  1.  0.  0.  0.]
--------------------------------------------------

Iteration 1:

--------------------------------------------------

Calculating B:

B = Bo * E1
Step 1: Solving system(1): uB = Cb
B:
 [[ 1.  0.  0.]
 [ 5.  1.  0.]
 [-1.  0.  1.]]
Cb:
 [-4.  0.  0.]
Result of u(1): [-4.  0.  0.]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [ 0. -1. -5. -3.]
K:
 [[ 1. -1. -1.  3.]
 [ 0.  1.  3.  8.]
 [ 0.  2.  3. -5.]]
Result(r):  [ 4. -5. -9.  9.]
Bland's rule: first negative r(i) is r1
--------------------------------------------------

Step 3: Solving system(2): By = K1
B:
 [[ 1.  0.  0.]
 [ 5.  1.  0.]
 [-1.  0.  1.]]
K: 4 
 [[-1.]
 [ 1.]
 [ 2.]]
Result of y(2): [-1.  6.  1.]
--------------------------------------------------

Step 4: check if y <= 0:

(y <= 0) is not true!

Finding optimal t:

Optimal t: 4.0

Column 2 leaves base (P)

--------------------------------------------------

ETA Matrix:
 [[ 1.  0. -1.]
 [ 0.  1.  6.]
 [ 0.  0.  1.]]
--------------------------------------------------

Step 5: updating x:

Old x: [ 0. 50.  4.  1.  0.  0.  0.]
New x: [ 0. 26.  0.  5.  4.  0.  0.]
--------------------------------------------------

Iteration 2:

--------------------------------------------------

Calculating B:

B = Bo * E1 * E2
Step 1: Solving system(1): uB = Cb
B:
 [[ 1.  0. -1.]
 [ 5.  1.  1.]
 [-1.  0.  2.]]
Cb:
 [-4.  0. -1.]
Result of u(1): [-9.  0. -5.]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [ 0.  0. -5. -3.]
K:
 [[ 1.  0. -1.  3.]
 [ 0.  0.  3.  8.]
 [ 0.  1.  3. -5.]]
Result(r):  [ 9.  5.  1. -1.]
Bland's rule: first negative r(i) is r3
--------------------------------------------------

Step 3: Solving system(2): By = K3
B:
 [[ 1.  0. -1.]
 [ 5.  1.  1.]
 [-1.  0.  2.]]
K: 6 
 [[ 3.]
 [ 8.]
 [-5.]]
Result of y(2): [ 1.  5. -2.]
--------------------------------------------------

Step 4: check if y <= 0:

(y <= 0) is not true!

Finding optimal t:

Optimal t: 5.0

Column 3 leaves base (P)

--------------------------------------------------

ETA Matrix:
 [[ 1.  0.  0.]
 [ 5.  1.  0.]
 [-2.  0.  1.]]
--------------------------------------------------

Step 5: updating x:

Old x: [ 0. 26.  0.  5.  4.  0.  0.]
New x: [ 0.  1.  0.  0. 14.  0.  5.]
--------------------------------------------------

Iteration 3:

--------------------------------------------------

Calculating B:

B = Bo * E1 * E2 * E3
Step 1: Solving system(1): uB = Cb
B:
 [[ 3.  0. -1.]
 [ 8.  1.  1.]
 [-5.  0.  2.]]
Cb:
 [-3.  0. -1.]
Result of u(1): [-1.100e+01  2.359e-16 -6.000e+00]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [ 0.  0. -5. -4.]
K:
 [[ 1.  0. -1.  1.]
 [ 0.  0.  3.  5.]
 [ 0.  1.  3. -1.]]
Result(r):  [11.  6.  2.  1.]
(r > 0) is true => optimal value is found!
--------------------------------------------------

Solution: [ 0.  1.  0.  0. 14.  0.  5.]
Optimal value: -29.0

