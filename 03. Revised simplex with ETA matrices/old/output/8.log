Revised simplex method
--------------------------------------------------

Select the type of input:
	1: Manual input
	2: Input from file
Selected: --------------------------------------------------

---- NOTE ----
Enter the relative path to the file, from under "/examples/" 
e.g. For file 1.txt, write "1.txt", that will load "/examples/1.txt"
--------------------------------------------------

---- NOTE ----
The file must be in the following format:
N M				Where N - number of equations and M - number of variables
"min" or "max"			Goal function minimisation or maximisation
c1 c2 c3 ... cM
A11 A12 ... A1M _ b1
A21 A22 ... A2M _ b2
................
AN1 AN2 ... ANM _ bN
  for x1, x2, x3, ... xM >= 0		Where '_' should be '<', '>' or '='

--------------------------------------------------

--------------------------------------------------

--------------------------------------------------

Enter the file name: Solving system(canonical form): Ax = b
c:
 [1. 1. 1. 0. 0.]
A:
 [[ 2. -1.  1.  1.  0.]
 [-1.  3. -5.  0.  1.]]
b:
 [-1.0, 3.0]
--------------------------------------------------

Set unit matrix:
c:
 [ 0.   0.   3.2 -0.8 -0.6]
A:
 [[ 1.   0.  -1.8  0.2  0.4]
 [ 0.   1.  -0.4  0.6  0.2]]
b:
 [1.0, 0.0]
Base indexes (P):
 [0, 1]
Nonbase indexes (Q):
 [2, 3, 4]
Base function value (Fo):
 -1.0
--------------------------------------------------

Revised Simplex:

Starting x value:  [1. 0. 0. 0. 0.]
Starting base matrix:
 [[1. 0.]
 [0. 1.]]
--------------------------------------------------

Iteration 0:

--------------------------------------------------

Calculating B:

B = Bo
Step 1: Solving system(1): uB = Cb
B:
 [[1. 0.]
 [0. 1.]]
Cb:
 [0. 0.]
Result of u(1): [0. 0.]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [ 3.2 -0.8 -0.6]
K:
 [[-1.8  0.2  0.4]
 [-0.4  0.6  0.2]]
Result(r):  [ 3.2 -0.8 -0.6]
Bland's rule: first negative r(i) is r1
--------------------------------------------------

Step 3: Solving system(2): By = K1
B:
 [[1. 0.]
 [0. 1.]]
K: 3 
 [[0.2]
 [0.6]]
Result of y(2): [0.2 0.6]
--------------------------------------------------

Step 4: check if y <= 0:

(y <= 0) is not true!

Finding optimal t:

Optimal t: 0.0

Column 1 leaves base (P)

--------------------------------------------------

ETA Matrix:
 [[1.  0.2]
 [0.  0.6]]
--------------------------------------------------

Step 5: updating x:

Old x: [1. 0. 0. 0. 0.]
New x: [1. 0. 0. 0. 0.]
--------------------------------------------------

Iteration 1:

--------------------------------------------------

Calculating B:

B = Bo * E1
Step 1: Solving system(1): uB = Cb
B:
 [[1.  0.2]
 [0.  0.6]]
Cb:
 [ 0.  -0.8]
Result of u(1): [ 0.    -1.333]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [ 3.2  0.  -0.6]
K:
 [[-1.8  0.   0.4]
 [-0.4  1.   0.2]]
Result(r):  [ 2.667  1.333 -0.333]
Bland's rule: first negative r(i) is r2
--------------------------------------------------

Step 3: Solving system(2): By = K2
B:
 [[1.  0.2]
 [0.  0.6]]
K: 4 
 [[0.4]
 [0.2]]
Result of y(2): [0.333 0.333]
--------------------------------------------------

Step 4: check if y <= 0:

(y <= 0) is not true!

Finding optimal t:

Optimal t: 0.0

Column 3 leaves base (P)

--------------------------------------------------

ETA Matrix:
 [[1.    0.333]
 [0.    0.333]]
--------------------------------------------------

Step 5: updating x:

Old x: [1. 0. 0. 0. 0.]
New x: [1. 0. 0. 0. 0.]
--------------------------------------------------

Iteration 2:

--------------------------------------------------

Calculating B:

B = Bo * E1 * E2
Step 1: Solving system(1): uB = Cb
B:
 [[1.  0.4]
 [0.  0.2]]
Cb:
 [ 0.  -0.6]
Result of u(1): [ 0. -3.]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [ 3.2  0.  -0.8]
K:
 [[-1.8  0.   0.2]
 [-0.4  1.   0.6]]
Result(r):  [2. 3. 1.]
(r > 0) is true => optimal value is found!
--------------------------------------------------

Solution: [1. 0. 0. 0. 0.]
Optimal value: 1.0

