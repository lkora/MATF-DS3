Select one of the possible opions:
	(1) Two-Phase simplex method
	(2) Dual simplex method
Option: --------------------------------------------------

Select the type of input:
	1: Manual input
	2: Input from file
Selected: --------------------------------------------------

---- NOTE ----
Enter the relative path to the file, from under "/examples/" 
e.g. For file 1.txt, write "1.txt", that will load "/examples/1.txt"
--------------------------------------------------

---- NOTE ----
The file must be in the following format:
N M				Where N - number of equations and M - number of variables
"min" or "max"			Goal function minimisation or maximisation
c1 c2 c3 ... cM
A11 A12 ... A1M _ b1
A21 A22 ... A2M _ b2
................
AN1 AN2 ... ANM _ bN
  for x1, x2, x3, ... xM >= 0		Where '_' should be '<', '>' or '='

--------------------------------------------------

--------------------------------------------------

--------------------------------------------------

Enter the file name: A1:
 [[ 1.  0. -1. -0.  1.  1.  2.  1.  3.]
 [ 0.  1. -0. -1.  2. -2.  3.  1.  1.]]
c1:  [1. 1. 0. 0. 0. 0. 0. 0. 0.]
b:  [4.0, 3.0]
Starting x value:  [4. 3. 0. 0. 0. 0. 0. 0. 0.]
--------------------------------------------------

Iteration 0:

--------------------------------------------------

Step 1: Solving system(1): uB = Cb
B:
 [[1. 0.]
 [0. 1.]]
Cb:
 [0. 0.]
Result of u(1): [0. 0.]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [ 1.  1. -3.  1. -5. -2. -4.]
K:
 [[-1.  0.  1.  1.  2.  1.  3.]
 [ 0. -1.  2. -2.  3.  1.  1.]]
Result(r):  [ 1.  1. -3.  1. -5. -2. -4.]
Bland's rule: first negative r(i) is r2
--------------------------------------------------

Step 3: Solving system(2): By = K2
B:
 [[1. 0.]
 [0. 1.]]
K: 4 
 [[1.]
 [2.]]
Result of y(2): [1. 2.]
--------------------------------------------------

Step 4: check if y <= 0:

(y <= 0) is not true!

Finding optimal t:

Optimal t: 1.5

Column 1 leaves base (P)

--------------------------------------------------

Step 5: updating x:

Old x: [4. 3. 0. 0. 0. 0. 0. 0. 0.]
New x: [2.5 0.  0.  0.  1.5 0.  0.  0.  0. ]
--------------------------------------------------

Iteration 1:

--------------------------------------------------

Step 1: Solving system(1): uB = Cb
B:
 [[1. 1.]
 [0. 2.]]
Cb:
 [ 0. -3.]
Result of u(1): [ 0.  -1.5]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [ 1.  1.  0.  1. -5. -2. -4.]
K:
 [[-1.  0.  0.  1.  2.  1.  3.]
 [ 0. -1.  1. -2.  3.  1.  1.]]
Result(r):  [ 1.  -0.5  1.5 -2.  -0.5 -0.5 -2.5]
Bland's rule: first negative r(i) is r1
--------------------------------------------------

Step 3: Solving system(2): By = K1
B:
 [[1. 1.]
 [0. 2.]]
K: 3 
 [[ 0.]
 [-1.]]
Result of y(2): [ 0.5 -0.5]
--------------------------------------------------

Step 4: check if y <= 0:

(y <= 0) is not true!

Finding optimal t:

Optimal t: 5.0

Column 0 leaves base (P)

--------------------------------------------------

Step 5: updating x:

Old x: [2.5 0.  0.  0.  1.5 0.  0.  0.  0. ]
New x: [0. 0. 0. 5. 4. 0. 0. 0. 0.]
--------------------------------------------------

Iteration 2:

--------------------------------------------------

Step 1: Solving system(1): uB = Cb
B:
 [[ 0.  1.]
 [-1.  2.]]
Cb:
 [ 1. -3.]
Result of u(1): [-1. -1.]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [ 1.  0.  0.  1. -5. -2. -4.]
K:
 [[-1.  1.  0.  1.  2.  1.  3.]
 [ 0.  0.  1. -2.  3.  1.  1.]]
Result(r):  [0. 1. 1. 0. 0. 0. 0.]
(r > 0) is true => optimal value is found!
--------------------------------------------------

F1:  0.0
x1:  [0. 0. 0. 5. 4. 0. 0. 0. 0.]
--------------------------------------------------

Pseudo indexes:
 []
--------------------------------------------------

New system:
A2:
 [[-1.  0.  1.  1.  2.  1.  3.]
 [ 0. -1.  2. -2.  3.  1.  1.]]
b2:  [4.0, 3.0]
c:  [0. 0. 2. 3. 5. 2. 3.]
--------------------------------------------------

Starting x value:  [2.75 1.25 0.   0.   0.   0.   0.  ]
--------------------------------------------------

Iteration 0:

--------------------------------------------------

Step 1: Solving system(1): uB = Cb
B:
 [[ 1.  0.]
 [-0.  1.]]
Cb:
 [0. 0.]
Result of u(1): [0. 0.]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [ 2.5  -0.25  0.75 -0.25 -4.25]
K:
 [[-0.5  -0.25  1.75  0.75  1.75]
 [-0.5   0.25  0.25  0.25  1.25]]
Result(r):  [ 2.5  -0.25  0.75 -0.25 -4.25]
Bland's rule: first negative r(i) is r1
--------------------------------------------------

Step 3: Solving system(2): By = K1
B:
 [[ 1.  0.]
 [-0.  1.]]
K: 3 
 [[-0.25]
 [ 0.25]]
Result of y(2): [-0.25  0.25]
--------------------------------------------------

Step 4: check if y <= 0:

(y <= 0) is not true!

Finding optimal t:

Optimal t: 5.0

Column 1 leaves base (P)

--------------------------------------------------

Step 5: updating x:

Old x: [2.75 1.25 0.   0.   0.   0.   0.  ]
New x: [4. 0. 0. 5. 0. 0. 0.]
--------------------------------------------------

Iteration 1:

--------------------------------------------------

Step 1: Solving system(1): uB = Cb
B:
 [[ 1.   -0.25]
 [-0.    0.25]]
Cb:
 [ 0.   -0.25]
Result of u(1): [ 0. -1.]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [ 2.5   0.    0.75 -0.25 -4.25]
K:
 [[-0.5   0.    1.75  0.75  1.75]
 [-0.5   1.    0.25  0.25  1.25]]
Result(r):  [ 2.  1.  1.  0. -3.]
Bland's rule: first negative r(i) is r4
--------------------------------------------------

Step 3: Solving system(2): By = K4
B:
 [[ 1.   -0.25]
 [-0.    0.25]]
K: 6 
 [[1.75]
 [1.25]]
Result of y(2): [3. 5.]
--------------------------------------------------

Step 4: check if y <= 0:

(y <= 0) is not true!

Finding optimal t:

Optimal t: 1.0

Column 3 leaves base (P)

--------------------------------------------------

Step 5: updating x:

Old x: [4. 0. 0. 5. 0. 0. 0.]
New x: [1. 0. 0. 0. 0. 0. 1.]
--------------------------------------------------

Iteration 2:

--------------------------------------------------

Step 1: Solving system(1): uB = Cb
B:
 [[ 1.    1.75]
 [-0.    1.25]]
Cb:
 [ 0.   -4.25]
Result of u(1): [ 0.  -3.4]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [ 2.5   0.    0.75 -0.25 -0.25]
K:
 [[-0.5   0.    1.75  0.75 -0.25]
 [-0.5   1.    0.25  0.25  0.25]]
Result(r):  [0.8 3.4 1.6 0.6 0.6]
(r > 0) is true => optimal value is found!
--------------------------------------------------

Solution:  [1. 0. 0. 0. 0. 0. 1.]
Optimal value: 
minf = 5.0
maxf = -5.0
