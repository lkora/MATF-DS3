Select one of the possible opions:
	(1) Two-Phase simplex method
	(2) Dual simplex method
Option: --------------------------------------------------

Select the type of input:
	1: Manual input
	2: Input from file
Selected: --------------------------------------------------

---- NOTE ----
Enter the relative path to the file, from under "/examples/" 
e.g. For file 1.txt, write "1.txt", that will load "/examples/1.txt"
--------------------------------------------------

---- NOTE ----
The file must be in the following format:
N M				Where N - number of equations and M - number of variables
"min" or "max"			Goal function minimisation or maximisation
c1 c2 c3 ... cM
A11 A12 ... A1M _ b1
A21 A22 ... A2M _ b2
................
AN1 AN2 ... ANM _ bN
  for x1, x2, x3, ... xM >= 0		Where '_' should be '<', '>' or '='

--------------------------------------------------

--------------------------------------------------

--------------------------------------------------

Enter the file name: Converting max to min.
A1:
 [[ 1.  0.  0.  0.  1.  0.  0.  0.  1.  3.  1.]
 [ 0.  1.  0.  0. -0. -1. -0. -0.  3.  1. -1.]
 [ 0.  0.  1.  0.  0.  0.  1.  0.  3.  1.  3.]
 [ 0.  0.  0.  1.  0.  0.  0.  1.  1.  0.  0.]]
c1:  [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0.]
b:  [10.0, 2.0, 6.0, 1.0]
Starting x value:  [10.  2.  6.  1.  0.  0.  0.  0.  0.  0.  0.]
--------------------------------------------------

Iteration 0:

--------------------------------------------------

Step 1: Solving system(1): uB = Cb
B:
 [[1. 0. 0. 0.]
 [0. 1. 0. 0.]
 [0. 0. 1. 0.]
 [0. 0. 0. 1.]]
Cb:
 [0. 0. 0. 0.]
Result of u(1): [0. 0. 0. 0.]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [-1.  1. -1. -1. -8. -5. -3.]
K:
 [[ 1.  0.  0.  0.  1.  3.  1.]
 [-0. -1. -0. -0.  3.  1. -1.]
 [ 0.  0.  1.  0.  3.  1.  3.]
 [ 0.  0.  0.  1.  1.  0.  0.]]
Result(r):  [-1.  1. -1. -1. -8. -5. -3.]
Bland's rule: first negative r(i) is r0
--------------------------------------------------

Step 3: Solving system(2): By = K0
B:
 [[1. 0. 0. 0.]
 [0. 1. 0. 0.]
 [0. 0. 1. 0.]
 [0. 0. 0. 1.]]
K: 4 
 [[ 1.]
 [-0.]
 [ 0.]
 [ 0.]]
Result of y(2): [1. 0. 0. 0.]
--------------------------------------------------

Step 4: check if y <= 0:

(y <= 0) is not true!

Finding optimal t:

Optimal t: 10.0

Column 0 leaves base (P)

--------------------------------------------------

Step 5: updating x:

Old x: [10.  2.  6.  1.  0.  0.  0.  0.  0.  0.  0.]
New x: [ 0.  2.  6.  1. 10.  0.  0.  0.  0.  0.  0.]
--------------------------------------------------

Iteration 1:

--------------------------------------------------

Step 1: Solving system(1): uB = Cb
B:
 [[ 1.  0.  0.  0.]
 [-0.  1.  0.  0.]
 [ 0.  0.  1.  0.]
 [ 0.  0.  0.  1.]]
Cb:
 [-1.  0.  0.  0.]
Result of u(1): [-1.  0.  0.  0.]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [ 0.  1. -1. -1. -8. -5. -3.]
K:
 [[ 1.  0.  0.  0.  1.  3.  1.]
 [ 0. -1. -0. -0.  3.  1. -1.]
 [ 0.  0.  1.  0.  3.  1.  3.]
 [ 0.  0.  0.  1.  1.  0.  0.]]
Result(r):  [ 1.  1. -1. -1. -7. -2. -2.]
Bland's rule: first negative r(i) is r2
--------------------------------------------------

Step 3: Solving system(2): By = K2
B:
 [[ 1.  0.  0.  0.]
 [-0.  1.  0.  0.]
 [ 0.  0.  1.  0.]
 [ 0.  0.  0.  1.]]
K: 6 
 [[ 0.]
 [-0.]
 [ 1.]
 [ 0.]]
Result of y(2): [0. 0. 1. 0.]
--------------------------------------------------

Step 4: check if y <= 0:

(y <= 0) is not true!

Finding optimal t:

Optimal t: 6.0

Column 2 leaves base (P)

--------------------------------------------------

Step 5: updating x:

Old x: [ 0.  2.  6.  1. 10.  0.  0.  0.  0.  0.  0.]
New x: [ 0.  2.  0.  1. 10.  0.  6.  0.  0.  0.  0.]
--------------------------------------------------

Iteration 2:

--------------------------------------------------

Step 1: Solving system(1): uB = Cb
B:
 [[ 1.  0.  0.  0.]
 [-0.  1. -0.  0.]
 [ 0.  0.  1.  0.]
 [ 0.  0.  0.  1.]]
Cb:
 [-1.  0. -1.  0.]
Result of u(1): [-1.  0. -1.  0.]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [ 0.  1.  0. -1. -8. -5. -3.]
K:
 [[ 1.  0.  0.  0.  1.  3.  1.]
 [ 0. -1.  0. -0.  3.  1. -1.]
 [ 0.  0.  1.  0.  3.  1.  3.]
 [ 0.  0.  0.  1.  1.  0.  0.]]
Result(r):  [ 1.  1.  1. -1. -4. -1.  1.]
Bland's rule: first negative r(i) is r3
--------------------------------------------------

Step 3: Solving system(2): By = K3
B:
 [[ 1.  0.  0.  0.]
 [-0.  1. -0.  0.]
 [ 0.  0.  1.  0.]
 [ 0.  0.  0.  1.]]
K: 7 
 [[ 0.]
 [-0.]
 [ 0.]
 [ 1.]]
Result of y(2): [0. 0. 0. 1.]
--------------------------------------------------

Step 4: check if y <= 0:

(y <= 0) is not true!

Finding optimal t:

Optimal t: 1.0

Column 3 leaves base (P)

--------------------------------------------------

Step 5: updating x:

Old x: [ 0.  2.  0.  1. 10.  0.  6.  0.  0.  0.  0.]
New x: [ 0.  2.  0.  0. 10.  0.  6.  1.  0.  0.  0.]
--------------------------------------------------

Iteration 3:

--------------------------------------------------

Step 1: Solving system(1): uB = Cb
B:
 [[ 1.  0.  0.  0.]
 [-0.  1. -0. -0.]
 [ 0.  0.  1.  0.]
 [ 0.  0.  0.  1.]]
Cb:
 [-1.  0. -1. -1.]
Result of u(1): [-1.  0. -1. -1.]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [ 0.  1.  0.  0. -8. -5. -3.]
K:
 [[ 1.  0.  0.  0.  1.  3.  1.]
 [ 0. -1.  0.  0.  3.  1. -1.]
 [ 0.  0.  1.  0.  3.  1.  3.]
 [ 0.  0.  0.  1.  1.  0.  0.]]
Result(r):  [ 1.  1.  1.  1. -3. -1.  1.]
Bland's rule: first negative r(i) is r4
--------------------------------------------------

Step 3: Solving system(2): By = K4
B:
 [[ 1.  0.  0.  0.]
 [-0.  1. -0. -0.]
 [ 0.  0.  1.  0.]
 [ 0.  0.  0.  1.]]
K: 8 
 [[1.]
 [3.]
 [3.]
 [1.]]
Result of y(2): [1. 3. 3. 1.]
--------------------------------------------------

Step 4: check if y <= 0:

(y <= 0) is not true!

Finding optimal t:

Optimal t: 0.6666666666666666

Column 1 leaves base (P)

--------------------------------------------------

Step 5: updating x:

Old x: [ 0.  2.  0.  0. 10.  0.  6.  1.  0.  0.  0.]
New x: [0.    0.    0.    0.    9.333 0.    4.    0.333 0.667 0.    0.   ]
--------------------------------------------------

Iteration 4:

--------------------------------------------------

Step 1: Solving system(1): uB = Cb
B:
 [[ 1.  1.  0.  0.]
 [-0.  3. -0. -0.]
 [ 0.  3.  1.  0.]
 [ 0.  1.  0.  1.]]
Cb:
 [-1. -8. -1. -1.]
Result of u(1): [-1. -1. -1. -1.]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [ 0.  1.  0.  0.  0. -5. -3.]
K:
 [[ 1.  0.  0.  0.  0.  3.  1.]
 [ 0. -1.  0.  0.  1.  1. -1.]
 [ 0.  0.  1.  0.  0.  1.  3.]
 [ 0.  0.  0.  1.  0.  0.  0.]]
Result(r):  [1.00e+00 2.22e-16 1.00e+00 1.00e+00 1.00e+00 0.00e+00 0.00e+00]
(r > 0) is true => optimal value is found!
--------------------------------------------------

F1:  0.0
x1:  [0.    0.    0.    0.    9.333 0.    4.    0.333 0.667 0.    0.   ]
--------------------------------------------------

Pseudo indexes:
 []
--------------------------------------------------

New system:
A2:
 [[ 1.  0.  0.  0.  1.  3.  1.]
 [-0. -1. -0. -0.  3.  1. -1.]
 [ 0.  0.  1.  0.  3.  1.  3.]
 [ 0.  0.  0.  1.  1.  0.  0.]]
b2:  [10.0, 2.0, 6.0, 1.0]
c:  [ 0.  0.  0.  0. -3. -1. -4.]
--------------------------------------------------

Starting x value:  [9.333 0.667 4.    0.333 0.    0.    0.   ]
--------------------------------------------------

Iteration 0:

--------------------------------------------------

Step 1: Solving system(1): uB = Cb
B:
 [[1. 0. 0. 0.]
 [0. 1. 0. 0.]
 [0. 0. 1. 0.]
 [0. 0. 0. 1.]]
Cb:
 [0. 0. 0. 0.]
Result of u(1): [0. 0. 0. 0.]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [-1.  0. -5.]
K:
 [[ 0.333  2.667  1.333]
 [-0.333  0.333 -0.333]
 [ 1.     0.     4.   ]
 [ 0.333 -0.333  0.333]]
Result(r):  [-1.  0. -5.]
Bland's rule: first negative r(i) is r0
--------------------------------------------------

Step 3: Solving system(2): By = K0
B:
 [[1. 0. 0. 0.]
 [0. 1. 0. 0.]
 [0. 0. 1. 0.]
 [0. 0. 0. 1.]]
K: 4 
 [[ 0.333]
 [-0.333]
 [ 1.   ]
 [ 0.333]]
Result of y(2): [ 0.333 -0.333  1.     0.333]
--------------------------------------------------

Step 4: check if y <= 0:

(y <= 0) is not true!

Finding optimal t:

Optimal t: 1.0000000000000002

Column 3 leaves base (P)

--------------------------------------------------

Step 5: updating x:

Old x: [9.333 0.667 4.    0.333 0.    0.    0.   ]
New x: [9. 1. 3. 0. 1. 0. 0.]
--------------------------------------------------

Iteration 1:

--------------------------------------------------

Step 1: Solving system(1): uB = Cb
B:
 [[ 1.     0.     0.     0.333]
 [ 0.     1.     0.    -0.333]
 [ 0.     0.     1.     1.   ]
 [ 0.     0.     0.     0.333]]
Cb:
 [ 0.  0.  0. -1.]
Result of u(1): [ 0.  0.  0. -3.]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [ 0.  0. -5.]
K:
 [[ 0.     2.667  1.333]
 [ 0.     0.333 -0.333]
 [ 0.     0.     4.   ]
 [ 1.    -0.333  0.333]]
Result(r):  [ 3. -1. -4.]
Bland's rule: first negative r(i) is r1
--------------------------------------------------

Step 3: Solving system(2): By = K1Two-Phase_simplex_&_Dual_simplex.py:739: RuntimeWarning: divide by zero encountered in double_scalars
  val = np.float64(x[P[i]]) / y[i]

B:
 [[ 1.     0.     0.     0.333]
 [ 0.     1.     0.    -0.333]
 [ 0.     0.     1.     1.   ]
 [ 0.     0.     0.     0.333]]
K: 5 
 [[ 2.667]
 [ 0.333]
 [ 0.   ]
 [-0.333]]
Result of y(2): [ 3.  0.  1. -1.]
--------------------------------------------------

Step 4: check if y <= 0:

(y <= 0) is not true!

Finding optimal t:

Optimal t: 3.0

Column 0 leaves base (P)

--------------------------------------------------

Step 5: updating x:

Old x: [9. 1. 3. 0. 1. 0. 0.]
New x: [0. 1. 0. 0. 4. 3. 0.]
--------------------------------------------------

Iteration 2:

--------------------------------------------------

Step 1: Solving system(1): uB = Cb
B:
 [[ 2.667  0.     0.     0.333]
 [ 0.333  1.     0.    -0.333]
 [ 0.     0.     1.     1.   ]
 [-0.333  0.     0.     0.333]]
Cb:
 [ 0.  0.  0. -1.]
Result of u(1): [-0.333  0.     0.    -2.667]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [ 0.  0. -5.]
K:
 [[ 0.     1.     1.333]
 [ 0.     0.    -0.333]
 [ 0.     0.     4.   ]
 [ 1.     0.     0.333]]
Result(r):  [ 2.667  0.333 -3.667]
Bland's rule: first negative r(i) is r2
--------------------------------------------------

Step 3: Solving system(2): By = K2
B:
 [[ 2.667  0.     0.     0.333]
 [ 0.333  1.     0.    -0.333]
 [ 0.     0.     1.     1.   ]
 [-0.333  0.     0.     0.333]]
K: 6 
 [[ 1.333]
 [-0.333]
 [ 4.   ]
 [ 0.333]]
Result of y(2): [0.333 0.    2.667 1.333]
--------------------------------------------------

Step 4: check if y <= 0:

(y <= 0) is not true!

Finding optimal t:

Optimal t: 0.0

Column 2 leaves base (P)

--------------------------------------------------

Step 5: updating x:

Old x: [0. 1. 0. 0. 4. 3. 0.]
New x: [0. 1. 0. 0. 4. 3. 0.]
--------------------------------------------------

Iteration 3:

--------------------------------------------------

Step 1: Solving system(1): uB = Cb
B:
 [[ 2.667  0.     1.333  0.333]
 [ 0.333  1.    -0.333 -0.333]
 [ 0.     0.     4.     1.   ]
 [-0.333  0.     0.333  0.333]]
Cb:
 [ 0.  0. -5. -1.]
Result of u(1): [ 0.125  0.    -1.375  1.   ]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [0. 0. 0.]
K:
 [[0. 1. 0.]
 [0. 0. 0.]
 [0. 0. 1.]
 [1. 0. 0.]]
Result(r):  [-1.    -0.125  1.375]
Bland's rule: first negative r(i) is r0
--------------------------------------------------

Step 3: Solving system(2): By = K0
B:
 [[ 2.667  0.     1.333  0.333]
 [ 0.333  1.    -0.333 -0.333]
 [ 0.     0.     4.     1.   ]
 [-0.333  0.     0.333  0.333]]
K: 3 
 [[0.]
 [0.]
 [0.]
 [1.]]
Result of y(2): [ 0.  1. -1.  4.]
--------------------------------------------------

Step 4: check if y <= 0:

(y <= 0) is not true!

Finding optimal t:

Optimal t: 1.0

Column 1 leaves base (P)

--------------------------------------------------

Step 5: updating x:

Old x: [0. 1. 0. 0. 4. 3. 0.]
New x: [0. 0. 0. 1. 0. 3. 1.]
--------------------------------------------------

Iteration 4:

--------------------------------------------------

Step 1: Solving system(1): uB = Cb
B:
 [[ 2.667  0.     1.333  0.333]
 [ 0.333  0.    -0.333 -0.333]
 [ 0.     0.     4.     1.   ]
 [-0.333  1.     0.333  0.333]]
Cb:
 [ 0.  0. -5. -1.]
Result of u(1): [ 0.125 -1.    -1.375  0.   ]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [0. 0. 0.]
K:
 [[0. 1. 0.]
 [1. 0. 0.]
 [0. 0. 1.]
 [0. 0. 0.]]
Result(r):  [ 1.    -0.125  1.375]
Bland's rule: first negative r(i) is r1
--------------------------------------------------

Step 3: Solving system(2): By = K1
B:
 [[ 2.667  0.     1.333  0.333]
 [ 0.333  0.    -0.333 -0.333]
 [ 0.     0.     4.     1.   ]
 [-0.333  1.     0.333  0.333]]
K: 0 
 [[1.]
 [0.]
 [0.]
 [0.]]
Result of y(2): [ 0.375  0.    -0.125  0.5  ]
--------------------------------------------------

Step 4: check if y <= 0:

(y <= 0) is not true!

Finding optimal t:

Optimal t: 0.0

Column 4 leaves base (P)

--------------------------------------------------

Step 5: updating x:

Old x: [0. 0. 0. 1. 0. 3. 1.]
New x: [0. 0. 0. 1. 0. 3. 1.]
--------------------------------------------------

Iteration 5:

--------------------------------------------------

Step 1: Solving system(1): uB = Cb
B:
 [[ 2.667  0.     1.333  1.   ]
 [ 0.333  0.    -0.333  0.   ]
 [ 0.     0.     4.     0.   ]
 [-0.333  1.     0.333  0.   ]]
Cb:
 [ 0.  0. -5.  0.]
Result of u(1): [ 0.    0.   -1.25  0.  ]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [ 0. -1.  0.]
K:
 [[ 0.     0.333  0.   ]
 [ 1.    -0.333  0.   ]
 [ 0.     1.     1.   ]
 [ 0.     0.333  0.   ]]
Result(r):  [0.   0.25 1.25]
(r > 0) is true => optimal value is found!
--------------------------------------------------

Solution:  [0. 0. 0. 1. 0. 3. 1.]
Optimal value: 
minf = -7.0
maxf = 7.0
