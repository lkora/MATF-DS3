Select one of the possible opions:
	(1) Two-Phase simplex method
	(2) Dual simplex method
Option: --------------------------------------------------

Select the type of input:
	1: Manual input
	2: Input from file
Selected: --------------------------------------------------

---- NOTE ----
Enter the relative path to the file, from under "/examples/" 
e.g. For file 1.txt, write "1.txt", that will load "/examples/1.txt"
--------------------------------------------------

---- NOTE ----
The file must be in the following format:
N M				Where N - number of equations and M - number of variables
"min" or "max"			Goal function minimisation or maximisation
c1 c2 c3 ... cM
A11 A12 ... A1M _ b1
A21 A22 ... A2M _ b2
................
AN1 AN2 ... ANM _ bN
  for x1, x2, x3, ... xM >= 0		Where '_' should be '<', '>' or '='

--------------------------------------------------

--------------------------------------------------

--------------------------------------------------

Enter the file name: Two-Phase_simplex_&_Dual_simplex.py:739: RuntimeWarning: divide by zero encountered in double_scalars
  val = np.float64(x[P[i]]) / y[i]
A1:
 [[ 1.  0. -1. -0. -2.  1. -1.]
 [ 0.  1.  0.  1. -1.  3. -5.]]
c1:  [1. 1. 0. 0. 0. 0. 0.]
b:  [1.0, 3.0]
Starting x value:  [1. 3. 0. 0. 0. 0. 0.]
--------------------------------------------------

Iteration 0:

--------------------------------------------------

Step 1: Solving system(1): uB = Cb
B:
 [[1. 0.]
 [0. 1.]]
Cb:
 [0. 0.]
Result of u(1): [0. 0.]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [ 1. -1.  3. -4.  6.]
K:
 [[-1. -0. -2.  1. -1.]
 [ 0.  1. -1.  3. -5.]]
Result(r):  [ 1. -1.  3. -4.  6.]
Bland's rule: first negative r(i) is r1
--------------------------------------------------

Step 3: Solving system(2): By = K1
B:
 [[1. 0.]
 [0. 1.]]
K: 3 
 [[-0.]
 [ 1.]]
Result of y(2): [0. 1.]
--------------------------------------------------

Step 4: check if y <= 0:

(y <= 0) is not true!

Finding optimal t:

Optimal t: 3.0

Column 1 leaves base (P)

--------------------------------------------------

Step 5: updating x:

Old x: [1. 3. 0. 0. 0. 0. 0.]
New x: [1. 0. 0. 3. 0. 0. 0.]
--------------------------------------------------

Iteration 1:

--------------------------------------------------

Step 1: Solving system(1): uB = Cb
B:
 [[ 1. -0.]
 [ 0.  1.]]
Cb:
 [ 0. -1.]
Result of u(1): [ 0. -1.]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [ 1.  0.  3. -4.  6.]
K:
 [[-1.  0. -2.  1. -1.]
 [ 0.  1. -1.  3. -5.]]
Result(r):  [ 1.  1.  2. -1.  1.]
Bland's rule: first negative r(i) is r3
--------------------------------------------------

Step 3: Solving system(2): By = K3
B:
 [[ 1. -0.]
 [ 0.  1.]]
K: 5 
 [[1.]
 [3.]]
Result of y(2): [1. 3.]
--------------------------------------------------

Step 4: check if y <= 0:

(y <= 0) is not true!

Finding optimal t:

Optimal t: 1.0

Column 0 leaves base (P)

--------------------------------------------------

Step 5: updating x:

Old x: [1. 0. 0. 3. 0. 0. 0.]
New x: [0. 0. 0. 0. 0. 1. 0.]
--------------------------------------------------

Iteration 2:

--------------------------------------------------

Step 1: Solving system(1): uB = Cb
B:
 [[ 1. -0.]
 [ 3.  1.]]
Cb:
 [-4. -1.]
Result of u(1): [-1. -1.]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [1. 0. 3. 0. 6.]
K:
 [[-1.  0. -2.  1. -1.]
 [ 0.  1. -1.  0. -5.]]
Result(r):  [0. 1. 0. 1. 0.]
(r > 0) is true => optimal value is found!
--------------------------------------------------

F1:  0.0
x1:  [0. 0. 0. 0. 0. 1. 0.]
--------------------------------------------------

Pseudo indexes:
 []
--------------------------------------------------

New system:
A2:
 [[-1. -0. -2.  1. -1.]
 [ 0.  1. -1.  3. -5.]]
b2:  [1.0, 3.0]
c:  [0. 0. 1. 1. 1.]
--------------------------------------------------

Starting x value:  [1. 0. 0. 0. 0.]
--------------------------------------------------

Iteration 0:

--------------------------------------------------

Step 1: Solving system(1): uB = Cb
B:
 [[1. 0.]
 [0. 1.]]
Cb:
 [0. 0.]
Result of u(1): [0. 0.]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [3. 1. 2.]
K:
 [[-2. -1. -1.]
 [ 5.  3. -2.]]
Result(r):  [3. 1. 2.]
(r > 0) is true => optimal value is found!
--------------------------------------------------

Solution:  [1. 0. 0. 0. 0.]
Optimal value: 
minf = 1.0
maxf = -1.0
