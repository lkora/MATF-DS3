Select one of the possible opions:
	(1) Two-Phase simplex method
	(2) Dual simplex method
Option: --------------------------------------------------

Select the type of input:
	1: Manual input
	2: Input from file
Selected: --------------------------------------------------

---- NOTE ----
Enter the relative path to the file, from under "/examples/" 
e.g. For file 1.txt, write "1.txt", that will load "/examples/1.txt"
--------------------------------------------------

---- NOTE ----
The file must be in the following format:
N M				Where N - number of equations and M - number of variables
"min" or "max"			Goal function minimisation or maximisation
c1 c2 c3 ... cM
A11 A12 ... A1M _ b1
A21 A22 ... A2M _ b2
................
AN1 AN2 ... ANM _ bN
  for x1, x2, x3, ... xM >= 0		Where '_' should be '<', '>' or '='

--------------------------------------------------

--------------------------------------------------

--------------------------------------------------

Enter the file name: A1:
 [[ 1.  0. -1.  1.  2. -1.]
 [ 0.  1.  0. -1.  3.  4.]]
c1:  [1. 1. 0. 0. 0. 0.]
b:  [3.0, 2.0]
Starting x value:  [3. 2. 0. 0. 0. 0.]
--------------------------------------------------

Iteration 0:

--------------------------------------------------

Step 1: Solving system(1): uB = Cb
B:
 [[1. 0.]
 [0. 1.]]
Cb:
 [0. 0.]
Result of u(1): [0. 0.]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [ 1.  0. -5. -3.]
K:
 [[-1.  1.  2. -1.]
 [ 0. -1.  3.  4.]]
Result(r):  [ 1.  0. -5. -3.]
Bland's rule: first negative r(i) is r2
--------------------------------------------------

Step 3: Solving system(2): By = K2
B:
 [[1. 0.]
 [0. 1.]]
K: 4 
 [[2.]
 [3.]]
Result of y(2): [2. 3.]
--------------------------------------------------

Step 4: check if y <= 0:

(y <= 0) is not true!

Finding optimal t:

Optimal t: 0.6666666666666666

Column 1 leaves base (P)

--------------------------------------------------

Step 5: updating x:

Old x: [3. 2. 0. 0. 0. 0.]
New x: [1.667 0.    0.    0.    0.667 0.   ]
--------------------------------------------------

Iteration 1:

--------------------------------------------------

Step 1: Solving system(1): uB = Cb
B:
 [[1. 2.]
 [0. 3.]]
Cb:
 [ 0. -5.]
Result of u(1): [ 0.    -1.667]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [ 1.  0.  0. -3.]
K:
 [[-1.  1.  0. -1.]
 [ 0. -1.  1.  4.]]
Result(r):  [ 1.    -1.667  1.667  3.667]
Bland's rule: first negative r(i) is r1
--------------------------------------------------

Step 3: Solving system(2): By = K1
B:
 [[1. 2.]
 [0. 3.]]
K: 3 
 [[ 1.]
 [-1.]]
Result of y(2): [ 1.667 -0.333]
--------------------------------------------------

Step 4: check if y <= 0:

(y <= 0) is not true!

Finding optimal t:

Optimal t: 1.0000000000000002

Column 0 leaves base (P)

--------------------------------------------------

Step 5: updating x:

Old x: [1.667 0.    0.    0.    0.667 0.   ]
New x: [-2.22e-16  0.00e+00  0.00e+00  1.00e+00  1.00e+00  0.00e+00]
--------------------------------------------------

Iteration 2:

--------------------------------------------------

Step 1: Solving system(1): uB = Cb
B:
 [[ 1.  2.]
 [-1.  3.]]
Cb:
 [ 0. -5.]
Result of u(1): [-1. -1.]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [ 1.  0.  0. -3.]
K:
 [[-1.  1.  0. -1.]
 [ 0.  0.  1.  4.]]
Result(r):  [0. 1. 1. 0.]
(r > 0) is true => optimal value is found!
--------------------------------------------------

F1:  0.0
x1:  [-2.22e-16  0.00e+00  0.00e+00  1.00e+00  1.00e+00  0.00e+00]
--------------------------------------------------

Pseudo indexes:
 []
--------------------------------------------------

New system:
A2:
 [[-1.  1.  2. -1.]
 [ 0. -1.  3.  4.]]
b2:  [3.0, 2.0]
c:  [ 0.  2. -3.  1.]
--------------------------------------------------

Starting x value:  [1. 1. 0. 0.]
--------------------------------------------------

Iteration 0:

--------------------------------------------------

Step 1: Solving system(1): uB = Cb
B:
 [[1. 0.]
 [0. 1.]]
Cb:
 [0. 0.]
Result of u(1): [0. 0.]
--------------------------------------------------

Step 2: Calculating r (r := C - uK):
C:
 [0.6 7.2]
K:
 [[-0.6 -2.2]
 [-0.2  0.6]]
Result(r):  [0.6 7.2]
(r > 0) is true => optimal value is found!
--------------------------------------------------

Solution:  [1. 1. 0. 0.]
Optimal value: 
minf = -1.0
maxf = 1.0
