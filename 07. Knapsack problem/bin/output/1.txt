Select the type of input:
	1: Manual input
	2: Input from file
Selected: 2

--------------------------------------------------

---- NOTE ----
Enter the relative path to the file, from under "/examples/" 
e.g. For file 1.txt, write "1.txt", that will load "/examples/1.txt"

--------------------------------------------------

---- NOTE ----
The input must be in the following format:
M				Where M - number of variables
"max"			Objective function maximisation
c1 c2 c3 ... cM
a1 a2 a3 a4 ... aM _ b
  for x1, x2, x3, ... xM >= 0		Where '_' should be '<=', '>=' or '='
'0/1' or 'Z'		For xi in set [0, 1], or for xi in set Z
'forward' or 'backward'		Recursive formula

--------------------------------------------------


--------------------------------------------------

Enter the file name: 1.txt
Loaded the problem:

max [10.  2. -1.  3.]
    [3 1 3 0] <= 4
 for xi in set [0-1]


Variable x4 gets value 1 because function has max

Solving knapsack FORWARDS:
Forming tables:

  K\Y   |   0    |   1    |   2    |   3    |   4    |
------------------------------------------------------
   1    |   0    |   0    |   0    |  10.0  |  10.0  |
------------------------------------------------------
   2    |   0    |  2.0   |  2.0   |  10.0  |  12.0  |
------------------------------------------------------
   3    |   0    |  2.0   |  2.0   |  10.0  |  12.0  |
------------------------------------------------------

  I\Y  |   0   |   1   |   2   |   3   |   4   |
------------------------------------------------
   1   |   0   |   0   |   0   |   1   |   1   |
------------------------------------------------
   2   |   0   |   2   |   2   |   1   |   2   |
------------------------------------------------
   3   |   0   |   2   |   2   |   1   |   2   |
------------------------------------------------

I3(4) = 2
Weight of 2 objecct is 1
I3(3) = 1
Weight of 1 objecct is 3

Optimal arrangement is: [1, 1, 0, 1]
Optimal value is: 15.0 
--------------------------------------------------

