Select the type of input:
	1: Manual input
	2: Input from file
Selected: 2

--------------------------------------------------

---- NOTE ----
Enter the relative path to the file, from under "/examples/" 
e.g. For file 1.txt, write "1.txt", that will load "/examples/1.txt"

--------------------------------------------------

---- NOTE ----
The input must be in the following format:
M				Where M - number of variables
"max"			Objective function maximisation
c1 c2 c3 ... cM
a1 a2 a3 a4 ... aM _ b
  for x1, x2, x3, ... xM >= 0		Where '_' should be '<=', '>=' or '='
'0/1' or 'Z'		For xi in set [0, 1], or for xi in set Z
'forward' or 'backward'		Recursive formula

--------------------------------------------------


--------------------------------------------------

Enter the file name: 2.txt
Loaded the problem:

max [3. 1. 7. 2. 5.]
    [4 1 2 3 6] <= 8
 for xi in set [0-1]



Solving knapsack FORWARDS:
Forming tables:

  K\Y   |   0    |   1    |   2    |   3    |   4    |   5    |   6    |   7    |   8    |
------------------------------------------------------------------------------------------
   1    |   0    |   0    |   0    |   0    |  3.0   |  3.0   |  3.0   |  3.0   |  3.0   |
------------------------------------------------------------------------------------------
   2    |   0    |  1.0   |  1.0   |  1.0   |  3.0   |  4.0   |  4.0   |  4.0   |  4.0   |
------------------------------------------------------------------------------------------
   3    |   0    |  1.0   |  7.0   |  8.0   |  8.0   |  8.0   |  10.0  |  11.0  |  11.0  |
------------------------------------------------------------------------------------------
   4    |   0    |  1.0   |  7.0   |  8.0   |  8.0   |  9.0   |  10.0  |  11.0  |  11.0  |
------------------------------------------------------------------------------------------
   5    |   0    |  1.0   |  7.0   |  8.0   |  8.0   |  9.0   |  10.0  |  11.0  |  12.0  |
------------------------------------------------------------------------------------------

  I\Y  |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |
--------------------------------------------------------------------------------
   1   |   0   |   0   |   0   |   0   |   1   |   1   |   1   |   1   |   1   |
--------------------------------------------------------------------------------
   2   |   0   |   2   |   2   |   2   |   1   |   2   |   2   |   2   |   2   |
--------------------------------------------------------------------------------
   3   |   0   |   2   |   3   |   3   |   3   |   3   |   3   |   3   |   3   |
--------------------------------------------------------------------------------
   4   |   0   |   2   |   3   |   3   |   3   |   4   |   3   |   3   |   3   |
--------------------------------------------------------------------------------
   5   |   0   |   2   |   3   |   3   |   3   |   4   |   3   |   3   |   5   |
--------------------------------------------------------------------------------

I5(8) = 5
Weight of 5 objecct is 6
I5(2) = 3
Weight of 3 objecct is 2

Optimal arrangement is: [0, 0, 1, 0, 1]
Optimal value is: 12.0 
--------------------------------------------------

