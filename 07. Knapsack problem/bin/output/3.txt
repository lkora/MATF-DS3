Select the type of input:
	1: Manual input
	2: Input from file
Selected: 2

--------------------------------------------------

---- NOTE ----
Enter the relative path to the file, from under "/examples/" 
e.g. For file 1.txt, write "1.txt", that will load "/examples/1.txt"

--------------------------------------------------

---- NOTE ----
The input must be in the following format:
M				Where M - number of variables
"max"			Objective function maximisation
c1 c2 c3 ... cM
a1 a2 a3 a4 ... aM _ b
  for x1, x2, x3, ... xM >= 0		Where '_' should be '<=', '>=' or '='
'0/1' or 'Z'		For xi in set [0, 1], or for xi in set Z
'forward' or 'backward'		Recursive formula

--------------------------------------------------


--------------------------------------------------

Enter the file name: 3.txt
Loaded the problem:

max [3. 1. 7. 2. 5.]
    [4 1 2 3 6] <= 8
 for xi in set [0-1]



Solving knapsack BACKWARDS:


F5(8) = max[ 0.0 + F4(8) , 5.0 + F4(2) ,]

F4(8) = max[ 0.0 + F3(8) , 2.0 + F3(5) ,]

F3(8) = max[ 0.0 + F2(8) , 7.0 + F2(6) ,]

F2(8) = max[ 0.0 + F1(8) , 1.0 + F1(7) ,]

F1(8) = 1
F1(7) = 1
F2(6) = max[ 0.0 + F1(6) , 1.0 + F1(5) ,]

F1(6) = 1
F1(5) = 1
F3(5) = max[ 0.0 + F2(5) , 7.0 + F2(3) ,]

F2(5) = max[ 0.0 + F1(5) , 1.0 + F1(4) ,]

F1(5) = 1
F1(4) = 1
F2(3) = max[ 0.0 + F1(3) , 1.0 + F1(2) ,]

F1(3) = 1
F1(2) = 0
F4(2) = max[ 0.0 + F3(2) ,]

F3(2) = max[ 0.0 + F2(2) , 7.0 + F2(0) ,]

F2(2) = max[ 0.0 + F1(2) , 1.0 + F1(1) ,]

F1(2) = 0
F1(1) = 0
F2(0) = max[ 0.0 + F1(0) ,]

F1(0) = 0

After calculating memoization:

  K\Y   |   0    |   1    |   2    |   3    |   4    |   5    |   6    |   7    |   8    |
------------------------------------------------------------------------------------------
   1    |   0    |   0    |   0    |   1    |   1    |   1    |   1    |   1    |   1    |
------------------------------------------------------------------------------------------
   2    |  0.0   |  -inf  |  1.0   |  1.0   |  -inf  |  2.0   |  2.0   |  -inf  |  2.0   |
------------------------------------------------------------------------------------------
   3    |  -inf  |  -inf  |  7.0   |  -inf  |  -inf  |  8.0   |  -inf  |  -inf  |  9.0   |
------------------------------------------------------------------------------------------
   4    |  -inf  |  -inf  |  7.0   |  -inf  |  -inf  |  -inf  |  -inf  |  -inf  |  10.0  |
------------------------------------------------------------------------------------------
   5    |  -inf  |  -inf  |  -inf  |  -inf  |  -inf  |  -inf  |  -inf  |  -inf  |  12.0  |
------------------------------------------------------------------------------------------
[10.0, 12.0]
1
[7.0]
0
[1.0, 7.0]
1
[0.0]
0
[0.0]
0
[-inf]
0

Optimal arrangement is: [0, 0, 1, 0, 1]
Optimal value is: 12.0 
--------------------------------------------------

