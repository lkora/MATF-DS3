Select the type of input:
	1: Manual input
	2: Input from file
Selected: 2
--------------------------------------------------

---- NOTE ----
Enter the relative path to the file, from under "/examples/" 
e.g. For file 1.txt, write "1.txt", that will load "/examples/1.txt"

--------------------------------------------------

---- NOTE ----
The input must be in the following format:
M				Where M - number of variables
"max"			Objective function maximisation
c1 c2 c3 ... cM
a1 a2 a3 a4 ... aM _ b
  for x1, x2, x3, ... xM >= 0		Where '_' should be '<=', '>=' or '='
'0/1' or 'Z'		For xi in set [0, 1], or for xi in set Z
'forward' or 'backward'		Recursive formula

--------------------------------------------------


--------------------------------------------------

Enter the file name: 5.txt
Loaded the problem:

max [3. 4. 5. 2.]
    [2 3 4 5] <= 9
 for xi in set Z



Solving knapsack FORWARDS:
Forming tables:

  K\Y   |   0    |   1    |   2    |   3    |   4    |   5    |   6    |   7    |   8    |   9    |
---------------------------------------------------------------------------------------------------
   1    |  0.0   |  0.0   |  3.0   |  3.0   |  6.0   |  6.0   |  9.0   |  9.0   |  12.0  |  12.0  |
---------------------------------------------------------------------------------------------------
   2    |  0.0   |  0.0   |  3.0   |  4.0   |  6.0   |  7.0   |  9.0   |  10.0  |  12.0  |  13.0  |
---------------------------------------------------------------------------------------------------
   3    |  0.0   |  0.0   |  3.0   |  4.0   |  6.0   |  7.0   |  9.0   |  10.0  |  12.0  |  13.0  |
---------------------------------------------------------------------------------------------------
   4    |  0.0   |  0.0   |  3.0   |  4.0   |  6.0   |  7.0   |  9.0   |  10.0  |  12.0  |  13.0  |
---------------------------------------------------------------------------------------------------

  I\Y  |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   |
----------------------------------------------------------------------------------------
   1   |   0   |   0   |   1   |   1   |   1   |   1   |   1   |   1   |   1   |   1   |
----------------------------------------------------------------------------------------
   2   |   0   |   0   |   1   |   2   |   1   |   2   |   1   |   2   |   1   |   2   |
----------------------------------------------------------------------------------------
   3   |   0   |   0   |   1   |   2   |   1   |   2   |   1   |   2   |   1   |   2   |
----------------------------------------------------------------------------------------
   4   |   0   |   0   |   1   |   2   |   1   |   2   |   1   |   2   |   1   |   2   |
----------------------------------------------------------------------------------------

I4(9) = 2
Weight of 2 objecct is 3
I4(6) = 1
Weight of 1 objecct is 2
I4(4) = 1
Weight of 1 objecct is 2
I4(2) = 1
Weight of 1 objecct is 2

Optimal arrangement is: [3, 1, 0, 0]
Optimal value is: 13.0 
--------------------------------------------------

